x11()
plot(vlogP)
c = 150000
w = 500
vlogP <- variogram(P_INTERPOLA~1, data = soil.data, cutoff=c, width = w)
# vlogP <- variogram(P_INTERPOLA~1, data = soil.data)
x11()
plot(vlogP)
c = 150000
w = 100
vlogP <- variogram(P_INTERPOLA~1, data = soil.data, cutoff=c, width = w)
# vlogP <- variogram(P_INTERPOLA~1, data = soil.data)
x11()
plot(vlogP)
c = 150000
w = 1000
vlogP <- variogram(P_INTERPOLA~1, data = soil.data, cutoff=c, width = w)
# vlogP <- variogram(P_INTERPOLA~1, data = soil.data)
x11()
plot(vlogP)
c = 150000
w = 3000
vlogP <- variogram(P_INTERPOLA~1, data = soil.data, cutoff=c, width = w)
# vlogP <- variogram(P_INTERPOLA~1, data = soil.data)
x11()
plot(vlogP)
c = 125000
w = 3000
vlogP <- variogram(P_INTERPOLA~1, data = soil.data, cutoff=c, width = w)
# vlogP <- variogram(P_INTERPOLA~1, data = soil.data)
x11()
plot(vlogP)
c = 70000
w = 500
vlogP <- variogram(logP~1, data = soil.data, cutoff=c, width = w)
x11()
plot(vlogP)
plot(vlogP)
plot(vlogP)
plot(vlogP)
vlogP <- variogram(logP~1, data = soil.data, cutoff=c, width = w)
plot(vlogP)
x11()
plot(vlogP)
n = 0.18
p = 0.35
r = 42000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.18
p = 0.30
r = 42000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.18
p = 0.25
r = 42000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.18
p = 0.25
r = 30000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.18
p = 0.25
r = 30000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Exp")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.18
p = 0.20
r = 30000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Exp")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.05
p = 0.20
r = 30000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.15
p = 0.15
r = 45000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.18
p = 0.12
r = 50000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.23
p = 0.12
r = 50000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.20
p = 0.12
r = 50000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.18
p = 0.17
r = 50000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.18
p = 0.12
r = 50000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.18
p = 0.14
r = 50000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.18
p = 0.15
r = 50000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.18
p = 0.14
r = 50000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
vgFitLogP <- fit.variogram(vlogP,vgmLogP)
attr(vgFitLogP,"SSErr")
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Exp")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.18
p = 0.14
r = 50000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Exp")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Gau")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Mat")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
vgFitLogP <- fit.variogram(vlogP,vgmLogP)
attr(vgFitLogP,"SSErr")
logP.CV <- krige.cv(formula = logP~1, soil.data, model=vgFitLogP ,nfold=nrow(soil.data))
logP.CV <- krige.cv(formula = logP~1, soil.data, model=vgFitLogP ,nfold=10)
logP.CV$P_PREDICT_bk <- expm1(logP.CV$var1.pred + 0.5*logP.CV$var1.var)
logP.CV$P_INTERPOLA <- soil.data$P_INTERPOLA
x11()
plot(x=logP.CV$var1.pred, y=logP.CV$observed, col='red',
main='Ajuste del modelo con los datos de entrenamiento\nM?todo: Simple Kriging\n(logaritmo ppm de f?sforo)',
xlab = 'log. ppm de f?sforo estimado', ylab='log. ppm de f?sforo observado')
abline(c(0,1), lty=2)
cor.test(x=logP.CV$observed, y= logP.CV$var1.pred, alternative = "two.sided", conf.level = 0.95, method = "pearson")
r<-RMSE(obs = logP.CV$observed, pred = logP.CV$var1.pred)
r
x11()
plot(x=logP.CV$P_PREDICT_bk, y=logP.CV$Fosforo_pp, col='red',
main='Ajuste del modelo con los datos de entrenamiento\nM?todo: Simple Kriging\n(ppm P)',
xlab = 'ppm de P estimado', ylab='ppm de P observado')
abline(c(0,1), lty=2)
cor.test(x=logP.CV$P_PREDICT_bk, y= logP.CV$Fosforo_pp, alternative = "two.sided", conf.level = 0.95, method = "pearson")
cor.test(x=logP.CV$P_PREDICT_bk, y= logP.CV$Fosforo_pp, alternative = "two.sided", conf.level = 0.95, method = "pearson")
x11()
plot(x=logP.CV$P_PREDICT_bk, y=logP.CV$P_INTERPOLA, col='red',
main='Ajuste del modelo con los datos de entrenamiento\nM?todo: Simple Kriging\n(ppm P)',
xlab = 'ppm de P estimado', ylab='ppm de P observado')
abline(c(0,1), lty=2)
cor.test(x=logP.CV$P_PREDICT_bk, y= logP.CV$Fosforo_pp, alternative = "two.sided", conf.level = 0.95, method = "pearson")
cor.test(x=logP.CV$P_PREDICT_bk, y= logP.CV$Fosforo_pp, alternative = "two.sided", conf.level = 0.95, method = "pearson")
cor.test(x=logP.CV$P_PREDICT_bk, y= logP.CV$P_INTERPOLA, alternative = "two.sided", conf.level = 0.95, method = "pearson")
rm(list=ls()) # Clean the workspace
gc()
library(sqldf)
library(rgdal)
library(gdalUtils)
library(sp)
library(maptools)
library(caret)
library(sp)
library(gstat)
library(plyr)
library(ggplot2)
library(randomForest)
set.seed(32323)
baseDeDatos <- "D:\FaST_2020\Data\BD\PTOS_BD_Suelos_CyL.sqlite"
baseDeDatos <- "D:/FaST_2020/Data/BD/PTOS_BD_Suelos_CyL.sqlite"
connExp <- dbConnect(SQLite(), dbname = baseDeDatos)
query<-"SELECT ID_MUESTRA, ORIGEN, SEASON, LABORATORIO, P_INTERPOLA, COOR_X_ETRS89, COOR_Y_ETRS89, ARCILLA, ARENA, ETP, FC_UK, GDD, KSAT_UK, LIBREHELADAS, LIMO, mde_250m, MO, pH_RASTER, PMed_ABRIL, PMed_AGOSTO, PMed_ANUAL, PMed_DICIEMBRE, PMed_ENERO, PMed_FEBRERO, PMed_INVIERNO, PMed_JUNIO, PMed_MARZO, PMed_MAYO, PMed_NOVIEMBRE, PMed_OCTUBRE, PMed_PRIMAVERA, PMed_SEPTIEMBRE, PMed_VERANO, RADIACION, Rug_250, SAT_UK, slope_250m, TIERRA_ARABLE, TMed_ABRIL, TMed_AGOSTO, TMed_DICIEMBRE, TMed_ENERO, TMed_JULIO, TMed_JUNIO, TMed_MARZO, TMed_MAYO, TMed_NOVIEMBRE, TMed_OCTUBRE, TMed_SEPTIEMBRE, TMMAX_ABRIL, TMMAX_AGOSTO, TMMAX_DICIEMBRE, TMMAX_ENERO, TMMAX_FEBRERO, TMMAX_JULIO, TMMAX_JUNIO, TMMAX_MARZO, TMMAX_MAYO, TMMAX_NOVIEMBRE, TMMAX_OCTUBRE, TMMAX_SEPTIEMBRE, WP_UK, CRAD_UK, PMed_JULIO, TMed_FEBRERO
FROM FOSFORO_SAMPLES_COVARIANTS_2"
soil.data <- as.data.frame(fetch(dbSendQuery(conn = connExp, query), n=-1))
dbDisconnect(connExp)
nrow(soil.data)
install.packages("sqldf")
install.packages("rgdal")
install.packages("gdalUtils")
install.packages("sp")
install.packages("maptools")
install.packages("caret")
install.packages("rgdal")
version
install.packages("sqldf")
install.packages("rgdal")
install.packages("rgdal")
install.packages("gdalUtils")
install.packages("sp")
install.packages("maptools")
install.packages("caret")
install.packages("sp")
install.packages("gstat")
install.packages("plyr")
install.packages("ggplot2")
install.packages("randomForest")
library(sqldf)
library(rgdal)
library(gdalUtils)
library(sp)
library(maptools)
library(caret)
library(sp)
library(gstat)
library(plyr)
library(ggplot2)
library(randomForest)
library(sqldf)
# library(rgdal)
# library(gdalUtils)
library(sp)
library(maptools)
library(caret)
library(gstat)
library(plyr)
library(ggplot2)
set.seed(32323)
etrs89<-"+proj=utm +zone=30 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
baseDeDatos <- "/home/alberto/Dropbox/trabajo/FaST_2020/Data/BD/PTOS_BD_Suelos_CyL.sqlite"
# baseDeDatos <- "D:/Dropbox/trabajo/FaST_2020/Data/BD/PTOS_BD_Suelos_CyL.sqlite"
connExp <- dbConnect(SQLite(), dbname = baseDeDatos)
query <- "SELECT ID_MUESTRA, POTASIO_PPM, COOR_X_ETRS89, COOR_Y_ETRS89, ARCILLA, ARENA, ETP, FC_UK, GDD, KSAT_UK, LIBREHELADAS, LIMO, mde_250m, MO, pH_RASTER, PMed_ABRIL, PMed_AGOSTO, PMed_ANUAL, PMed_DICIEMBRE, PMed_ENERO, PMed_FEBRERO, PMed_INVIERNO, PMed_JUNIO, PMed_MARZO, PMed_MAYO, PMed_NOVIEMBRE, PMed_OCTUBRE, PMed_PRIMAVERA, PMed_SEPTIEMBRE, PMed_VERANO, RADIACION, Rug_250, SAT_UK, slope_250m, TIERRA_ARABLE, TMed_ABRIL, TMed_AGOSTO, TMed_DICIEMBRE, TMed_ENERO, TMed_JULIO, TMed_JUNIO, TMed_MARZO, TMed_MAYO, TMed_NOVIEMBRE, TMed_OCTUBRE, TMed_SEPTIEMBRE, TMMAX_ABRIL, TMMAX_AGOSTO, TMMAX_DICIEMBRE, TMMAX_ENERO, TMMAX_FEBRERO, TMMAX_JULIO, TMMAX_JUNIO, TMMAX_MARZO, TMMAX_MAYO, TMMAX_NOVIEMBRE, TMMAX_OCTUBRE, TMMAX_SEPTIEMBRE, WP_UK, CRAD_UK, PMed_JULIO, TMed_FEBRERO FROM POTASIO_SAMPLES_COVARIANTS"
soil.data <- as.data.frame(fetch(dbSendQuery(conn = connExp, query), n=-1))
baseDeDatos <- "/media/alberto/DATOS/Trabajo/FaST_2020/Data/BD/PTOS_BD_Suelos_CyL.sqlite"
# baseDeDatos <- "D:/Dropbox/trabajo/FaST_2020/Data/BD/PTOS_BD_Suelos_CyL.sqlite"
connExp <- dbConnect(SQLite(), dbname = baseDeDatos)
query <- "SELECT ID_MUESTRA, POTASIO_PPM, COOR_X_ETRS89, COOR_Y_ETRS89, ARCILLA, ARENA, ETP, FC_UK, GDD, KSAT_UK, LIBREHELADAS, LIMO, mde_250m, MO, pH_RASTER, PMed_ABRIL, PMed_AGOSTO, PMed_ANUAL, PMed_DICIEMBRE, PMed_ENERO, PMed_FEBRERO, PMed_INVIERNO, PMed_JUNIO, PMed_MARZO, PMed_MAYO, PMed_NOVIEMBRE, PMed_OCTUBRE, PMed_PRIMAVERA, PMed_SEPTIEMBRE, PMed_VERANO, RADIACION, Rug_250, SAT_UK, slope_250m, TIERRA_ARABLE, TMed_ABRIL, TMed_AGOSTO, TMed_DICIEMBRE, TMed_ENERO, TMed_JULIO, TMed_JUNIO, TMed_MARZO, TMed_MAYO, TMed_NOVIEMBRE, TMed_OCTUBRE, TMed_SEPTIEMBRE, TMMAX_ABRIL, TMMAX_AGOSTO, TMMAX_DICIEMBRE, TMMAX_ENERO, TMMAX_FEBRERO, TMMAX_JULIO, TMMAX_JUNIO, TMMAX_MARZO, TMMAX_MAYO, TMMAX_NOVIEMBRE, TMMAX_OCTUBRE, TMMAX_SEPTIEMBRE, WP_UK, CRAD_UK, PMed_JULIO, TMed_FEBRERO FROM POTASIO_SAMPLES_COVARIANTS"
soil.data <- as.data.frame(fetch(dbSendQuery(conn = connExp, query), n=-1))
dbDisconnect(connExp)
str(soil.data)
summary(soil.data$POTASIO_PPM)
hist(soil.data$POTASIO_PPM, col='Lightblue',
main = 'Histograma ppm potasio',
xlab = 'Potasio (ppm)', ylab = 'Frecuencia', freq = TRUE)
abline(v=mean(soil.data$POTASIO_PPM), col='Red', lty=2)
abline(v=median(soil.data$POTASIO_PPM), col='grey', lty=2)
hist(soil.data$POTASIO_PPM, col='Lightblue',
main = 'Histograma ppm potasio',
xlab = 'Potasio (ppm)', ylab = 'Frecuencia', freq = FALSE)
abline(v=mean(soil.data$POTASIO_PPM), col='Red', lty=2)
abline(v=median(soil.data$POTASIO_PPM), col='grey', lty=2)
hist(soil.data$POTASIO_PPM, col='Lightblue',
main = 'Histograma ppm potasio',
xlab = 'Potasio (ppm)', ylab = 'Frecuencia', freq = TRUE)
abline(v=mean(soil.data$POTASIO_PPM), col='Red', lty=2)
abline(v=median(soil.data$POTASIO_PPM), col='grey', lty=2)
qqnorm(soil.data$POTASIO_PPM, col='Red',
xlab='Cuantiles teoricos', ylab='Cuantiles de la muestra',
main = 'Q-Q plot de normalidad\npotasio(ppm)')
qqline(soil.data$POTASIO_PPM, lty=2)
summary(log1p(soil.data$POTASIO_PPM))
soil.data$logK <- log1p(soil.data$POTASIO_PPM)
hist(soil.data$logK, col='Lightblue',
main = 'Histograma potasio transformado \n(logaritmo ppm)',
xlab = 'Potasio (ppm)', ylab='Frecuencia', freq = TRUE)
abline(v=mean(soil.data$logK), col='Red', lty=2)
abline(v=c(mean(soil.data$logK)-sd(soil.data$logK),mean(soil.data$logK)+sd(soil.data$logK))
,col='grey', lty=2)
qqnorm(soil.data$logK, col='Red', main = 'Q-Q plot normalidad potasio transformado\n(logaritmo ppm)')
qqline(soil.data$logK, lty=2)
inTrain <- createDataPartition(y = soil.data$logK, p = 0.8, list = FALSE)
soil.data <- soil.data[inTrain,]
soilData.test <- soil.data[-inTrain,]
length(soil.data)
length(soilData.test)
length(soilData.test)
length(soil.data)
soil.data <- soil.data[inTrain,]
soilData.test <- soil.data[-inTrain,]
length(soil.data)
length(soilData.test)
inTrain
soilData.test
rows(soil.data)
nrows(soil.data)
nrow(soil.data)
nrow(soilData.test)
coordinates(soil.data)<- ~COOR_X_ETRS89 + COOR_Y_ETRS89
soil.data
coordinates(soil.data)<- ~COOR_X_ETRS89 + COOR_Y_ETRS89
summary(soil.data$COOR_X_ETRS89)
summary(soil.data$COOR_Y_ETRS89)
soil.data[soil.data[is.na(soil.data$COOR_X_ETRS89)]]
soil.data[is.na(soil.data$COOR_X_ETRS89)]
soil.data[is.na(soil.data$COOR_X_ETRS89),]
rm(list=ls()) # Clean the workspace
library(sqldf)
library(sp)
library(maptools)
library(caret)
library(gstat)
library(plyr)
library(ggplot2)
set.seed(32323)
etrs89<-"+proj=utm +zone=30 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
baseDeDatos <- "/media/alberto/DATOS/Trabajo/FaST_2020/Data/BD/PTOS_BD_Suelos_CyL.sqlite"
# baseDeDatos <- "D:/Dropbox/trabajo/FaST_2020/Data/BD/PTOS_BD_Suelos_CyL.sqlite"
connExp <- dbConnect(SQLite(), dbname = baseDeDatos)
query <- "SELECT ID_MUESTRA, POTASIO_PPM, COOR_X_ETRS89, COOR_Y_ETRS89, ARCILLA, ARENA, ETP, FC_UK, GDD, KSAT_UK, LIBREHELADAS, LIMO, mde_250m, MO, pH_RASTER, PMed_ABRIL, PMed_AGOSTO, PMed_ANUAL, PMed_DICIEMBRE, PMed_ENERO, PMed_FEBRERO, PMed_INVIERNO, PMed_JUNIO, PMed_MARZO, PMed_MAYO, PMed_NOVIEMBRE, PMed_OCTUBRE, PMed_PRIMAVERA, PMed_SEPTIEMBRE, PMed_VERANO, RADIACION, Rug_250, SAT_UK, slope_250m, TIERRA_ARABLE, TMed_ABRIL, TMed_AGOSTO, TMed_DICIEMBRE, TMed_ENERO, TMed_JULIO, TMed_JUNIO, TMed_MARZO, TMed_MAYO, TMed_NOVIEMBRE, TMed_OCTUBRE, TMed_SEPTIEMBRE, TMMAX_ABRIL, TMMAX_AGOSTO, TMMAX_DICIEMBRE, TMMAX_ENERO, TMMAX_FEBRERO, TMMAX_JULIO, TMMAX_JUNIO, TMMAX_MARZO, TMMAX_MAYO, TMMAX_NOVIEMBRE, TMMAX_OCTUBRE, TMMAX_SEPTIEMBRE, WP_UK, CRAD_UK, PMed_JULIO, TMed_FEBRERO FROM POTASIO_SAMPLES_COVARIANTS"
soil.data <- as.data.frame(fetch(dbSendQuery(conn = connExp, query), n=-1))
dbDisconnect(connExp)
soil.data$logK <- log1p(soil.data$POTASIO_PPM)
inTrain <- createDataPartition(y = soil.data$logK, p = 0.8, list = FALSE)
soil.data <- soil.data[inTrain,]
soilData.test <- soil.data[-inTrain,]
nrow(soil.data)
nrow(soilData.test)
soil.data[is.na(soil.data$COOR_X_ETRS89),]
summary(soil.data$COOR_X_ETRS89)
summary(soil.data$COOR_Y_ETRS89)
coordinates(soil.data)<- ~COOR_X_ETRS89 + COOR_Y_ETRS89
proj4string(soil.data)<-CRS(etrs89)
vlogP <- variogram(logP~1, data = soil.data)
vlogK <- variogram(logK~1, data = soil.data)
# c = 125000
# w = 3000
# vlogP <- variogram(P_INTERPOLA~1, data = soil.data, cutoff=c, width = w)
# vlogP <- variogram(P_INTERPOLA~1, data = soil.data)
# x11()
plot(vlogK)
x11()
plot(vlogK)
rm(list=ls()) # Clean the workspace
gc()
library(sqldf)
# library(rgdal)
# library(gdalUtils)
library(sp)
library(maptools)
library(caret)
library(gstat)
library(plyr)
library(ggplot2)
set.seed(32323)
etrs89<-"+proj=utm +zone=30 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
baseDeDatos <- "D:/FaST_2020/Data/BD/PTOS_BD_Suelos_CyL.sqlite"
connExp <- dbConnect(SQLite(), dbname = baseDeDatos)
query <- "SELECT ID_MUESTRA, POTASIO_PPM, COOR_X_ETRS89, COOR_Y_ETRS89, ARCILLA, ARENA, ETP, FC_UK, GDD, KSAT_UK, LIBREHELADAS, LIMO, mde_250m, MO, pH_RASTER, PMed_ABRIL, PMed_AGOSTO, PMed_ANUAL, PMed_DICIEMBRE, PMed_ENERO, PMed_FEBRERO, PMed_INVIERNO, PMed_JUNIO, PMed_MARZO, PMed_MAYO, PMed_NOVIEMBRE, PMed_OCTUBRE, PMed_PRIMAVERA, PMed_SEPTIEMBRE, PMed_VERANO, RADIACION, Rug_250, SAT_UK, slope_250m, TIERRA_ARABLE, TMed_ABRIL, TMed_AGOSTO, TMed_DICIEMBRE, TMed_ENERO, TMed_JULIO, TMed_JUNIO, TMed_MARZO, TMed_MAYO, TMed_NOVIEMBRE, TMed_OCTUBRE, TMed_SEPTIEMBRE, TMMAX_ABRIL, TMMAX_AGOSTO, TMMAX_DICIEMBRE, TMMAX_ENERO, TMMAX_FEBRERO, TMMAX_JULIO, TMMAX_JUNIO, TMMAX_MARZO, TMMAX_MAYO, TMMAX_NOVIEMBRE, TMMAX_OCTUBRE, TMMAX_SEPTIEMBRE, WP_UK, CRAD_UK, PMed_JULIO, TMed_FEBRERO FROM POTASIO_SAMPLES_COVARIANTS"
soil.data <- as.data.frame(fetch(dbSendQuery(conn = connExp, query), n=-1))
dbDisconnect(connExp)
hist(soil.data$POTASIO_PPM, col='Lightblue',
main = 'Histograma ppm potasio',
xlab = 'Potasio (ppm)', ylab = 'Frecuencia', freq = TRUE)
abline(v=mean(soil.data$POTASIO_PPM), col='Red', lty=2)
abline(v=median(soil.data$POTASIO_PPM), col='grey', lty=2)
soil.data$logK <- log1p(soil.data$POTASIO_PPM)
hist(soil.data$logK, col='Lightblue',
main = 'Histograma potasio transformado \n(logaritmo ppm)',
xlab = 'Potasio (ppm)', ylab='Frecuencia', freq = TRUE)
abline(v=mean(soil.data$logK), col='Red', lty=2)
abline(v=c(mean(soil.data$logK)-sd(soil.data$logK),mean(soil.data$logK)+sd(soil.data$logK))
,col='grey', lty=2)
inTrain <- createDataPartition(y = soil.data$logK, p = 0.8, list = FALSE)
soil.data <- soil.data[inTrain,]
soilData.test <- soil.data[-inTrain,]
nrow(soil.data)
nrow(soilData.test)
coordinates(soil.data)<- ~COOR_X_ETRS89 + COOR_Y_ETRS89
proj4string(soil.data)<-CRS(etrs89)
c = 150000
w = 1500
vlogK <- variogram(logK~1, data = soil.data, cutoff=c, width = w)
plot(vlogK)
n = 0.21
p = 0.18
r = 77000
vgmLogK <- vgm(nugget = n, psill = p, range = r, model = "Sph")
# x11()
plot(vlogK,vgmLogK, col = 'Red',
main='Semivariograma del potasio \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
plot(vlogK,vgmLogK, col = 'Red',
main='Semivariograma del potasio \n(trans. logarítmica)',
xlab = 'Distancia', ylab='Semivarianza')
vgFitLogK <- fit.variogram(vlogK,vgmLogK)
attr(vgFitLogK,"SSErr")
logK.CV <- krige.cv(formula = logK~1, soil.data, model=vgFitLogK ,nfold=10)
logK.CV$K_PREDICT_bk <- expm1(logK.CV$var1.pred + 0.5*logK.CV$var1.var)
logK.CV$K_INTERPOLA <- soil.data$POTASIO_PPM
plot(x=logK.CV$var1.pred, y=logK.CV$observed, col='red',
main='Ajuste del modelo con los datos de entrenamiento\nMétodo: Ordinary Kriging\n(logaritmo ppm de potasio)',
xlab = 'log. ppm de potasio estimado', ylab='log. ppm de potasio observado')
abline(c(0,1), lty=2)
cor.test(x=logK.CV$observed, y= logK.CV$var1.pred, alternative = "two.sided", conf.level = 0.95, method = "pearson")
r<-RMSE(obs = logK.CV$observed, pred = logK.CV$var1.pred)
r
plot(x=logK.CV$var1.pred, y=logK.CV$residual, col='red',
main='Dispersión de los residuos\nMétodo: Ordinary Kriging\n(logaritmo ppm de potasio)',
xlab='log. ppm de f?potasio estimado', ylab = 'Residuos')
abline(h=0, lty=2)
abline(h=c(-1*r,r), col='grey', lty=2)
plot(x=logK.CV$K_PREDICT_bk, y=logK.CV$K_INTERPOLA, col='red',
main='Ajuste del modelo con los datos de entrenamiento\nMétodo: Ordinary Kriging\n(ppm P)',
xlab = 'ppm de K estimado', ylab='ppm de K observado')
abline(c(0,1), lty=2)
cor.test(x=logK.CV$K_PREDICT_bk, y= logK.CV$K_INTERPOLA, alternative = "two.sided", conf.level = 0.95, method = "pearson")
logK.CV$Residos_bk <- logK.CV$K_INTERPOLA - logP.CV$K_PREDICT_bk
logK.CV$Residos_bk <- logK.CV$K_INTERPOLA - logK.CV$K_PREDICT_bk
r<-RMSE(obs = logK.CV$K_INTERPOLA, pred = logK.CV$K_PREDICT_bk)
r
plot(x=logK.CV$K_PREDICT_bk, y=logK.CV$Residos_bk, col='red',
main='Dispersión de los residuos\nMétodo: Ordinary Kriging\n(ppm de K)',
xlab='ppm de K estimado', ylab = 'Residuos')
abline(h=0, lty=2)
abline(h=c(-1*r,r), col='grey', lty=2)
hist(logK.CV$Residos_bk)
baseDeDatos <- "D:/FaST_2020/Data/BD/PTOS_BD_Suelos_CyL.sqlite"
connExp <- dbConnect(SQLite(), dbname = baseDeDatos)
query<-"SELECT COOR_X_ETRS89, COOR_Y_ETRS89 FROM PTOS_INTERPOLAR"
localizaciones <- as.data.frame(fetch(dbSendQuery(conn = connExp, query), n=-1))
dbDisconnect(connExp)
coordinates(localizaciones)<- ~COOR_X_ETRS89 + COOR_Y_ETRS89
proj4string(localizaciones)<-CRS(etrs89)
kLogK <- krige(logK~1, locations = soil.data, newdata = localizaciones,
model = vgFitLogK, debug.level = -1)
kLogK$K_PREDICT <- expm1(kLogK$var1.pred)
kLogK$K_PREDICT_CORR <- expm1(kLogK$var1.pred + 0.5*kLogK$var1.var)
DF.kLogK <- as(kLogK, "data.frame")
baseDeDatos <- "D:/FaST_2020/Data/BD/PTOS_BD_Suelos_CyL.sqlite"
connExp <- dbConnect(SQLite(), dbname = baseDeDatos)
dbWriteTable(connExp, "OK_POTASIO_new", DF.kLogk[,c('COOR_X_ETR','COOR_Y_ETR','K_PREDICT','K_PREDICT_CORR')])
dbWriteTable(connExp, "OK_POTASIO_250m", DF.kLogK)
dbWriteTable(connExp, "OK_POTASIO_new", DF.kLogK[,c('COOR_X_ETR','COOR_Y_ETR','K_PREDICT','K_PREDICT_CORR')])
DF.kLogK
dbWriteTable(connExp, "OK_POTASIO_new", DF.kLogK[,c('COOR_X_ETRS89','COOR_Y_ETRS89','K_PREDICT','K_PREDICT_CORR')])
