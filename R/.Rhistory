install.packages("sqldf")
rm(list=ls()) # Clean the workspace
gc()
source("scripts/R/DeclaracionFunciones.R")
source("scripts/R/DeclaracionFunciones.R")
getcwd()
getwd()
source("/media/alberto/DATOS/Trabajo/ModelosAgronomicos_2016/scripts/R/DeclaracionFunciones.R")
conexCalibra <- dbConnect(SQLite(),
dbname="/media/alberto/DATOS/Trabajo/ModelosAgronomicos_2016/BD/Calibracion_y_Simulacion_2016.sqlite")
consulta <- "SELECT
E.YEAR AS YEAR,
E.ID_NUM AS ID_NUM,
E.ID_GRID AS ID_GRID,
E.CULTIVO AS CULTIVO,
E.BIOMASA AS BIOMASA,
E.HI AS HI,
E.RTO_AQUACROP AS RTO_AQUACROP,
E.RTO_ESYRCE AS RTO_ESYRCE,
F.ID_PROVIN AS ID_PROVIN,
F.ID_COMARCA AS ID_COMARCA
FROM(
SELECT
C.ID_NUM AS ID_NUM,
C.ID_NUM AS ID_NUM_GRID,
C.YEAR AS YEAR,
D.YEAR AS YEAR_CALIBRA,
C.CULTIVO AS CULTIVO,
D.CULTIVO AS CULTIVO_CALIBRA,
C.RTO_ESYRCE AS RTO_ESYRCE,
C.ID_GRID AS ID_GRID,
D.ID_GRID AS ID_GRID_CALIBRA,
D.BIOMASA AS BIOMASA,
D.HI AS HI,
D.RTO_AQUACROP AS RTO_AQUACROP
FROM (
SELECT
A.NUM AS ID_NUM,
B.ID_NUM AS ID_NUM_GRID,
A.YEAR AS YEAR,
A.CUL AS CULTIVO,
A.RTO_ESYRCE AS RTO_ESYRCE,
B.ID_GRID AS ID_GRID
FROM (
SELECT YEAR, NUM, CUL, AVG(RTO) AS RTO_ESYRCE
FROM SEGMENTO_ESYRCE_0415
WHERE CUL IN ('C2','TB') AND SRE='S' AND RTO>1
GROUP BY NUM, CUL, YEAR
) A
LEFT JOIN GRID_ESYRCE B
ON A.NUM=B.ID_NUM
) C
INNER JOIN GRID_CALIBRACION D
ON C.ID_GRID=D.ID_GRID AND C.CULTIVO=D.CULTIVO AND C.YEAR=D.YEAR
) E
LEFT JOIN GRID_COMARCA_PROVINCIA F
ON E.ID_GRID=F.ID_GRID
"
dbSendQuery(conn = conexCalibra,consulta)
AquaCrop_Esyrce <- as.data.frame(fetch(dbSendQuery(conn = conexCalibra,
consulta), n=-1))
dbDisconnect(conexCalibra)
creaPlotRegresion(dirOut="/media/alberto/DATOS/Trabajo/ModelosAgronomicos_2016/PlotCongreso/",
dtfr=AquaCrop_Esyrce, entidad="ID_PROVIN", cultivo="TB")
source("/media/alberto/DATOS/Trabajo/ModelosAgronomicos_2016/scripts/R/DeclaracionFunciones.R")
creaPlotRegresion(dirOut="/media/alberto/DATOS/Trabajo/ModelosAgronomicos_2016/PlotCongreso/",
dtfr=AquaCrop_Esyrce, entidad="ID_PROVIN", cultivo="TB")
source("/media/alberto/DATOS/Trabajo/ModelosAgronomicos_2016/scripts/R/DeclaracionFunciones.R")
creaPlotRegresion(dirOut="/media/alberto/DATOS/Trabajo/ModelosAgronomicos_2016/PlotCongreso/",
dtfr=AquaCrop_Esyrce, entidad="ID_PROVIN", cultivo="TB")
source('/media/alberto/DATOS/Trabajo/ModelosAgronomicos_2016/scripts/R/CreaFuncionesEscalado.R', echo=TRUE)
rm(list=ls()) # Clean the workspace
gc()
source("/media/alberto/DATOS/Trabajo/ModelosAgronomicos_2016/scripts/R/DeclaracionFunciones.R")
conexCalibra <- dbConnect(SQLite(),
dbname="/media/alberto/DATOS/Trabajo/ModelosAgronomicos_2016/BD/Calibracion_y_Simulacion_2016.sqlite")
consulta <- "SELECT
E.YEAR AS YEAR,
E.ID_NUM AS ID_NUM,
E.ID_GRID AS ID_GRID,
E.CULTIVO AS CULTIVO,
E.BIOMASA AS BIOMASA,
E.HI AS HI,
E.RTO_AQUACROP AS RTO_AQUACROP,
E.RTO_ESYRCE AS RTO_ESYRCE,
F.ID_PROVIN AS ID_PROVIN,
F.ID_COMARCA AS ID_COMARCA
FROM(
SELECT
C.ID_NUM AS ID_NUM,
C.ID_NUM AS ID_NUM_GRID,
C.YEAR AS YEAR,
D.YEAR AS YEAR_CALIBRA,
C.CULTIVO AS CULTIVO,
D.CULTIVO AS CULTIVO_CALIBRA,
C.RTO_ESYRCE AS RTO_ESYRCE,
C.ID_GRID AS ID_GRID,
D.ID_GRID AS ID_GRID_CALIBRA,
D.BIOMASA AS BIOMASA,
D.HI AS HI,
D.RTO_AQUACROP AS RTO_AQUACROP
FROM (
SELECT
A.NUM AS ID_NUM,
B.ID_NUM AS ID_NUM_GRID,
A.YEAR AS YEAR,
A.CUL AS CULTIVO,
A.RTO_ESYRCE AS RTO_ESYRCE,
B.ID_GRID AS ID_GRID
FROM (
SELECT YEAR, NUM, CUL, AVG(RTO) AS RTO_ESYRCE
FROM SEGMENTO_ESYRCE_0415
WHERE CUL IN ('C2','TB') AND SRE='S' AND RTO>1
GROUP BY NUM, CUL, YEAR
) A
LEFT JOIN GRID_ESYRCE B
ON A.NUM=B.ID_NUM
) C
INNER JOIN GRID_CALIBRACION D
ON C.ID_GRID=D.ID_GRID AND C.CULTIVO=D.CULTIVO AND C.YEAR=D.YEAR
) E
LEFT JOIN GRID_COMARCA_PROVINCIA F
ON E.ID_GRID=F.ID_GRID
"
dbSendQuery(conn = conexCalibra,consulta)
AquaCrop_Esyrce <- as.data.frame(fetch(dbSendQuery(conn = conexCalibra,
consulta), n=-1))
dbDisconnect(conexCalibra)
creaPlotRegresion(dirOut="/media/alberto/DATOS/Trabajo/ModelosAgronomicos_2016/PlotCongreso/",
dtfr=AquaCrop_Esyrce, entidad="ID_PROVIN", cultivo="TB")
install.packages("phenex")
source('~/Dropbox/trabajo/PrediccionCosechas_2020/src/R/phenex_FOI.R', echo=TRUE)
library(sqldf)
rm(list=ls()) # Clean the workspace
gc()
setwd('D://Textura_CyL//CAMPO_SEGOVIANO//src//R')
# setwd('D://Textura_CyL//CAMPO_SEGOVIANO//src//R')
setwd('//home//alberto//Dropbox//trabajo//FaST_2020//src//R')
library(sqldf)
library(rgdal)
install.packages("rgdal")
library(rgdal)
install.packages("gdalUtilities")
library(gdalUtils)
install.packages("sp")
install.packages("maptools")
library(sp)
library(maptools)
install.packages("caret")
install.packages("gstat")
install.packages("plyr")
install.packages("ggplot2")
library(sqldf)
# library(rgdal)
# library(gdalUtils)
library(sp)
library(maptools)
library(caret)
library(gstat)
library(plyr)
library(ggplot2)
set.seed(32323)
etrs89<-"+proj=utm +zone=30 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
baseDeDatos <- "../../DB/PTOS_BD_Suelos_CyL.sqlite"
connExp <- dbConnect(SQLite(), dbname = baseDeDatos)
# setwd('D://Textura_CyL//CAMPO_SEGOVIANO//src//R')
setwd('//home//alberto//Dropbox//trabajo//FaST_2020//src//R')
baseDeDatos <- "../../DB/PTOS_BD_Suelos_CyL.sqlite"
connExp <- dbConnect(SQLite(), dbname = baseDeDatos)
baseDeDatos <- "..//..//DB//PTOS_BD_Suelos_CyL.sqlite"
connExp <- dbConnect(SQLite(), dbname = baseDeDatos)
getwd()
baseDeDatos <- "..//..//Data//DB//PTOS_BD_Suelos_CyL.sqlite"
connExp <- dbConnect(SQLite(), dbname = baseDeDatos)
baseDeDatos
baseDeDatos <- "./home/alberto/Dropbox/trabajo/FaST_2020/Data/BD/PTOS_BD_Suelos_CyL.sqlite"
connExp <- dbConnect(SQLite(), dbname = baseDeDatos)
baseDeDatos <- "/home/alberto/Dropbox/trabajo/FaST_2020/Data/BD/PTOS_BD_Suelos_CyL.sqlite"
connExp <- dbConnect(SQLite(), dbname = baseDeDatos)
getwd()
query<-"SELECT ID_MUESTRA, COOR_X_ETRS89, COOR_Y_ETRS89, P_INTERPOLA, CRAD_UK, ARCILLA, ARENA, FC_UK, KSAT_UK, LIMO, MO, pH_RASTER, SAT_UK, WP_UK FROM FOSFORO_SAMPLES_COVARIANTS"
soil.data <- as.data.frame(fetch(dbSendQuery(conn = connExp, query), n=-1))
soil.data
dbDisconnect(connExp)
summary(soil.data$P_INTERPOLA)
x11()
hist(soil.data$P_INTERPOLA, col='Lightblue',
main = 'Histograma ppm f?sforo',
xlab = 'F?sforo (ppm)', ylab = 'Frecuencia', freq = TRUE)
abline(v=mean(soil.data$P_INTERPOLA), col='Red', lty=2)
abline(v=median(soil.data$P_INTERPOLA), col='grey', lty=2)
x11()
qqnorm(soil.data$P_INTERPOLA, col='Red',
xlab='Cuantiles te?ricos', ylab='Cuantiles de la muestra',
main = 'Q-Q plot de normalidad\nf?sforo(ppm)')
qqline(soil.data$P_INTERPOLA, lty=2)
summary(log1p(soil.data$P_INTERPOLA))
soil.data$logP <- log1p(soil.data$P_INTERPOLA)
x11()
hist(log1p(soil.data$logP), col='Lightblue',
main = 'Histograma f?sforo transformado \n(logaritmo ppm)',
xlab = 'F?sforo (ppm)', ylab='Frecuencia', freq = TRUE)
abline(v=mean(soil.data$logP), col='Red', lty=2)
abline(v=c(mean(soil.data$logP)-sd(soil.data$logP),mean(soil.data$logP)+sd(soil.data$logP))
,col='grey', lty=2)
x11()
qqnorm(soil.data$logP, col='Red', main = 'Q-Q plot normalidad f?sforo transformado\n(logaritmo ppm)')
qqline(soil.data$logP, lty=2)
inTrain <- createDataPartition(y = soil.data$logP, p = 0.8, list = FALSE)
soil.data <- soil.data[inTrain,]
soilData.test <- soil.data[-inTrain,]
coordinates(soil.data)<- ~COOR_X_ETR + COOR_Y_ETR
coordinates(soil.data)<- ~COOR_X_ETRS89 + COOR_Y_ETRS89
proj4string(soil.data)<-CRS(etrs89)
c = 45000
w = 3000
vlogP <- variogram(logP~1, data = soil.data, cutoff=c, width = w)
x11()
plot(vlogP)
vlogP <- variogram(logP~1, data = soil.data)
x11()
plot(vlogP)
c = 55000
w = 500
vlogP <- variogram(logP~1, data = soil.data, cutoff=c, width = w)
x11()
plot(vlogP)
c = 70000
w = 500
vlogP <- variogram(logP~1, data = soil.data, cutoff=c, width = w)
# vlogP <- variogram(logP~1, data = soil.data)
x11()
plot(vlogP)
vlogP <- variogram(P_INTERPOLA~1, data = soil.data)
x11()
plot(vlogP)
c = 150000
w = 500
vlogP <- variogram(P_INTERPOLA~1, data = soil.data, cutoff=c, width = w)
# vlogP <- variogram(P_INTERPOLA~1, data = soil.data)
x11()
plot(vlogP)
c = 150000
w = 100
vlogP <- variogram(P_INTERPOLA~1, data = soil.data, cutoff=c, width = w)
# vlogP <- variogram(P_INTERPOLA~1, data = soil.data)
x11()
plot(vlogP)
c = 150000
w = 1000
vlogP <- variogram(P_INTERPOLA~1, data = soil.data, cutoff=c, width = w)
# vlogP <- variogram(P_INTERPOLA~1, data = soil.data)
x11()
plot(vlogP)
c = 150000
w = 3000
vlogP <- variogram(P_INTERPOLA~1, data = soil.data, cutoff=c, width = w)
# vlogP <- variogram(P_INTERPOLA~1, data = soil.data)
x11()
plot(vlogP)
c = 125000
w = 3000
vlogP <- variogram(P_INTERPOLA~1, data = soil.data, cutoff=c, width = w)
# vlogP <- variogram(P_INTERPOLA~1, data = soil.data)
x11()
plot(vlogP)
c = 70000
w = 500
vlogP <- variogram(logP~1, data = soil.data, cutoff=c, width = w)
x11()
plot(vlogP)
plot(vlogP)
plot(vlogP)
plot(vlogP)
vlogP <- variogram(logP~1, data = soil.data, cutoff=c, width = w)
plot(vlogP)
x11()
plot(vlogP)
n = 0.18
p = 0.35
r = 42000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.18
p = 0.30
r = 42000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.18
p = 0.25
r = 42000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.18
p = 0.25
r = 30000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.18
p = 0.25
r = 30000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Exp")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.18
p = 0.20
r = 30000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Exp")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.05
p = 0.20
r = 30000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.15
p = 0.15
r = 45000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.18
p = 0.12
r = 50000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.23
p = 0.12
r = 50000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.20
p = 0.12
r = 50000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.18
p = 0.17
r = 50000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.18
p = 0.12
r = 50000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.18
p = 0.14
r = 50000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.18
p = 0.15
r = 50000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.18
p = 0.14
r = 50000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
vgFitLogP <- fit.variogram(vlogP,vgmLogP)
attr(vgFitLogP,"SSErr")
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Exp")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
n = 0.18
p = 0.14
r = 50000
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Exp")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Gau")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Mat")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
vgmLogP <- vgm(nugget = n, psill = p, range = r, model = "Sph")
x11()
plot(vlogP,vgmLogP, col = 'Red',
main='Semivariograma del f?sforo \n(trans. logar?tmica)',
xlab = 'Distancia', ylab='Semivarianza')
vgFitLogP <- fit.variogram(vlogP,vgmLogP)
attr(vgFitLogP,"SSErr")
logP.CV <- krige.cv(formula = logP~1, soil.data, model=vgFitLogP ,nfold=nrow(soil.data))
logP.CV <- krige.cv(formula = logP~1, soil.data, model=vgFitLogP ,nfold=10)
logP.CV$P_PREDICT_bk <- expm1(logP.CV$var1.pred + 0.5*logP.CV$var1.var)
logP.CV$P_INTERPOLA <- soil.data$P_INTERPOLA
x11()
plot(x=logP.CV$var1.pred, y=logP.CV$observed, col='red',
main='Ajuste del modelo con los datos de entrenamiento\nM?todo: Simple Kriging\n(logaritmo ppm de f?sforo)',
xlab = 'log. ppm de f?sforo estimado', ylab='log. ppm de f?sforo observado')
abline(c(0,1), lty=2)
cor.test(x=logP.CV$observed, y= logP.CV$var1.pred, alternative = "two.sided", conf.level = 0.95, method = "pearson")
r<-RMSE(obs = logP.CV$observed, pred = logP.CV$var1.pred)
r
x11()
plot(x=logP.CV$P_PREDICT_bk, y=logP.CV$Fosforo_pp, col='red',
main='Ajuste del modelo con los datos de entrenamiento\nM?todo: Simple Kriging\n(ppm P)',
xlab = 'ppm de P estimado', ylab='ppm de P observado')
abline(c(0,1), lty=2)
cor.test(x=logP.CV$P_PREDICT_bk, y= logP.CV$Fosforo_pp, alternative = "two.sided", conf.level = 0.95, method = "pearson")
cor.test(x=logP.CV$P_PREDICT_bk, y= logP.CV$Fosforo_pp, alternative = "two.sided", conf.level = 0.95, method = "pearson")
x11()
plot(x=logP.CV$P_PREDICT_bk, y=logP.CV$P_INTERPOLA, col='red',
main='Ajuste del modelo con los datos de entrenamiento\nM?todo: Simple Kriging\n(ppm P)',
xlab = 'ppm de P estimado', ylab='ppm de P observado')
abline(c(0,1), lty=2)
cor.test(x=logP.CV$P_PREDICT_bk, y= logP.CV$Fosforo_pp, alternative = "two.sided", conf.level = 0.95, method = "pearson")
cor.test(x=logP.CV$P_PREDICT_bk, y= logP.CV$Fosforo_pp, alternative = "two.sided", conf.level = 0.95, method = "pearson")
cor.test(x=logP.CV$P_PREDICT_bk, y= logP.CV$P_INTERPOLA, alternative = "two.sided", conf.level = 0.95, method = "pearson")
rm(list=ls()) # Clean the workspace
gc()
library(sqldf)
library(rgdal)
library(gdalUtils)
library(sp)
library(maptools)
library(caret)
library(sp)
library(gstat)
library(plyr)
library(ggplot2)
library(randomForest)
set.seed(32323)
baseDeDatos <- "D:\FaST_2020\Data\BD\PTOS_BD_Suelos_CyL.sqlite"
baseDeDatos <- "D:/FaST_2020/Data/BD/PTOS_BD_Suelos_CyL.sqlite"
connExp <- dbConnect(SQLite(), dbname = baseDeDatos)
query<-"SELECT ID_MUESTRA, ORIGEN, SEASON, LABORATORIO, P_INTERPOLA, COOR_X_ETRS89, COOR_Y_ETRS89, ARCILLA, ARENA, ETP, FC_UK, GDD, KSAT_UK, LIBREHELADAS, LIMO, mde_250m, MO, pH_RASTER, PMed_ABRIL, PMed_AGOSTO, PMed_ANUAL, PMed_DICIEMBRE, PMed_ENERO, PMed_FEBRERO, PMed_INVIERNO, PMed_JUNIO, PMed_MARZO, PMed_MAYO, PMed_NOVIEMBRE, PMed_OCTUBRE, PMed_PRIMAVERA, PMed_SEPTIEMBRE, PMed_VERANO, RADIACION, Rug_250, SAT_UK, slope_250m, TIERRA_ARABLE, TMed_ABRIL, TMed_AGOSTO, TMed_DICIEMBRE, TMed_ENERO, TMed_JULIO, TMed_JUNIO, TMed_MARZO, TMed_MAYO, TMed_NOVIEMBRE, TMed_OCTUBRE, TMed_SEPTIEMBRE, TMMAX_ABRIL, TMMAX_AGOSTO, TMMAX_DICIEMBRE, TMMAX_ENERO, TMMAX_FEBRERO, TMMAX_JULIO, TMMAX_JUNIO, TMMAX_MARZO, TMMAX_MAYO, TMMAX_NOVIEMBRE, TMMAX_OCTUBRE, TMMAX_SEPTIEMBRE, WP_UK, CRAD_UK, PMed_JULIO, TMed_FEBRERO
FROM FOSFORO_SAMPLES_COVARIANTS_2"
soil.data <- as.data.frame(fetch(dbSendQuery(conn = connExp, query), n=-1))
dbDisconnect(connExp)
nrow(soil.data)
install.packages("sqldf")
install.packages("rgdal")
install.packages("gdalUtils")
install.packages("sp")
install.packages("maptools")
install.packages("caret")
install.packages("rgdal")
version
